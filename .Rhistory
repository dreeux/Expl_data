require(xgboost); require(readr); require(caret); require(doParallel)

train <- read_csv("D:/kaggle/walmart_seg/train.csv")

test <- read_csv("D:/kaggle/walmart_seg/test.csv")

feature.names <- names(train)[!names(train) %in% c("TripType")]

response <- names(train)[1]

response <- train[ , response] ; response <- as.numeric(response)

class_old <- sort(unique(response))

class_new <- seq(0, 37)

#replace elements of class_old with elements of class_new in response

for( i in 1:38 ){
  
train$TripType[train$TripType == class_old[i]] <- class_new[i]

}

table(train$TripType)

#very basic stuff--------------------------------------------------------------------------------

cat("assuming text variables are categorical & replacing them with numeric ids\n")

for (f in feature.names) {
  
  if (class(train[[f]])=="character") {
    
    levels <- unique(c(train[[f]], test[[f]]))
    
    train[[f]] <- as.integer(factor(train[[f]], levels=levels))
    
    test[[f]]  <- as.integer(factor(test[[f]],  levels=levels))
  }
}

train[is.na(train)] <- 0

test[is.na(test)] <- 0

tra <- train[, feature.names]

split <- createDataPartition(y = train$TripType, p = 0.9, list = F) 

response_val <- train$TripType[-split]

response_train <- train$TripType[split]

dval <- xgb.DMatrix(data=data.matrix(tra[-split,]),  label = response_val )

dtrain <- xgb.DMatrix(data=data.matrix(tra[split,]), label = response_train)

watchlist <- list(val=dval, train=dtrain)

#basic training----------------------------------------------------------------------------------

numberOfClasses <- max(train$TripType) + 1

param <- list(objective = "multi:softprob",
              
              eval_metric = "mlogloss",
              
              num_class = numberOfClasses,
              
              nthreads = 2,
              
              eta                 = 0.015, 
              
              max_depth           = 20,  
              
              subsample           = 0.7,
              
              colsample_bytree    = 0.7)

cl <- makeCluster(2); registerDoParallel(cl)

clf <- xgb.train(params = param, data = dtrain, nrounds = 1000, watchlist = watchlist,
                 verbose = 1, maximize = T)

##after 900 rounds it increases then falls off hd check it`s behaviour further

cv.nround <- 5

cv.nfold <- 3

bst.cv = xgb.cv(param=param, data = dtrain, label = train$TripType, 
                
                nfold = cv.nfold, nrounds = cv.nround)
