localH2O <- h2o.init(max_mem_size = "10g")

train_target <- as.factor(train_target)

train$ID <- train_ID; train$target <- train_target

test$ID <- test_ID

feature.names <- names(train[1:(ncol(train) -2) ])

train.hex <- as.h2o(localH2O, object = train)

test.hex <- as.h2o(localH2O, object = test)

split <- h2o.runif(train.hex, seed = 1234)

training_frame <- h2o.assign(train.hex[split<0.8,], "training_frame")

validation_frame <- h2o.assign(train.hex[split>=0.8,], "validation_frame")


learner <- c("h2o.glm.wrapper", "h2o.randomForest.wrapper", 
   "h2o.gbm.wrapper", "h2o.deeplearning.wrapper")

metalearner <- "h2o.deeplearning.wrapper"

family <- "binomial"

fit <- h2o.ensemble(x = feature.names , y = "target", 
                                   
		training_frame = training_frame, 
                    
		family = family, 
                    	
		learner = learner, 
                    	
		metalearner = metalearner,
                    	
		cvControl = list(V = 5, shuffle = 		
		TRUE))

pred <- predict.h2o.ensemble(fit, validation_frame)

predictions <- as.data.frame(pred$pred)[,3]  

labels <- as.data.frame(validation_frame[,c(y)])[,1]

cvAUC::AUC(predictions = predictions , labels = labels)

L <- length(learner)

auc <- sapply(seq(L), function(l) cvAUC::AUC(predictions = 

as.data.frame(pred$basepred)[,l], labels = labels)) 

data.frame(learner, auc)
