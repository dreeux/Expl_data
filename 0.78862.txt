train <- read.csv("train_combined.csv")

test <- read.csv("test_combined.csv")

num_models <- 24;     (num_models + 1) is the response from the train column

itertions <- 1000

auc_mat <- matrix(0, num_models, 2)

auc_mat[ , 2] <-  1 : num_models

for(i in 1:num_models) {

auc_mat[i,1] <- auc(train[,i],train[,num_models+1])

print(auc(train[,i],train[,num_models+1]))

}

best_model_no <- auc_mat[auc_mat[,1] == min(auc_mat[,1]),2]

auc(train[,best_model_no],train[,num_models+1])

x <- matrix(0,1000,itertions)

prediction_test <- matrix(0,nrow(test),1)

prediction_train <- matrix(0,nrow(train),1)

for (j in 1:itertions){

auc_in <- 1

auc_new <- matrix(0,num_models,2)

auc_new[,2] <- 1:num_models

print(j)

t = 1

set.seed(j*121)

train1 <- train[sample(1:nrow(train), 10000,replace=FALSE),]

for(i in 1:num_models){

auc_mat[i,1] <- auc(train1[,i],train1[,num_models+1])

}

best_model_no <- auc_mat[auc_mat[,1] == min(auc_mat[,1]),2]

prediction <- train1[,best_model_no]

prediction_1 <- test[,best_model_no]

prediction_2 <- train[,best_model_no]

x[t,j] <- best_model_no

while(-1 < 0) {

t <- t + 1

prediction1 <- prediction

for (i in 1:num_models){

prediction1 <- ((t*prediction) + train1[,i])/(t+1)

auc_new[i,1] <-  auc(prediction1,train1[,num_models+1])

}

auc_min <- min(auc_new[,1])

model_no <- auc_new[auc_new[,1] == min(auc_new[,1]),2]

if(auc_in < rmsle_min) {break} else {

auc_in <- auc_min

prediction <- (((t-1)*prediction) + train1[,model_no])/t

prediction_1 <- (((t-1)*prediction_1) + test[,model_no])/t

prediction_2 <- (((t-1)*prediction_2) + train[,model_no])/t

x[t,j] <- model_no

print(auc_in)

}

}

prediction_test <- cbind(prediction_test,prediction_1)

prediction_train <- cbind(prediction_train,prediction_2)

}






skf = createFolds(response, k = 5 , list = TRUE, returnTrain = TRUE)


dataset_blend_train  = matrix(0, nrow(train), 1)


### Loop over the folds

i <- 0

for (sk in skf) {
  
  i <- i + 1
  
  print(paste("Fold", i))
  
  
  ### Extract and fit the train/test section for each fold
  
  tmp_train <- unlist(skf[i])
  
  x_train = train[-tmp_train, ]
  
  y_train = response[-tmp_train]
  
  x_test  = train[tmp_train,]
  
  y_test  = response[tmp_train]
  
  

dtrain <- xgb.DMatrix(data=data.matrix(x_train),label=y_train)


param <- list(  print.every.n       = 20,
                
                objective           = "reg:linear",
                
                depth = 21,
                
                min_child_weight = 3,
                
                subsample = 0.71,
                
                eta = 0.01,
                
                silent = 0,
                
                colsample_bytree = 0.8

                )



start <- Sys.time()


mod <- xgb.train(   params              = param,
                    
                    booster = "gbtree",
                    
                    data                = dtrain,
                    
                    nrounds             = 4000,
                    
                    verbose             = 1,
                    
                    maximize            = F
                    
                    )


dataset_blend_train[tmp_train, 1] <- predict(mod, data.matrix(x_test))

}

predict_test = predict(mod, data.matrix((test)))

SQWKfun = function(x = seq(1.5, 7.5, by = 1), pred) {
  preds = pred$predict
  true = pred$Response
  cuts = c(min(preds), x[1], x[2], x[3], x[4], x[5], x[6], x[7], max(preds))
  preds = as.numeric(Hmisc::cut2(preds, cuts))
  err = Metrics::ScoreQuadraticWeightedKappa(preds, true, 1, 8)
  return(-err)
}


pred = data.frame(Id=train_id, Response=response, predict=dataset_blend_train)

optCuts = optim(seq(1.5, 7.5, by = 1), SQWKfun, pred = pred)

print(optCuts)


preds = as.numeric(Hmisc::cut2(predict_test, c(-Inf, optCuts$par, Inf)))


submission <- data.frame(Id=id, Response=preds)

require(readr)

write_csv(submission, "01102016_4.csv")

feature_imp <- xgb.importance( model = mod)

feature_imp$Feature <- as.numeric(feature_imp$Feature)

names <- c()

for(i in 1:length(feature_imp$Feature)){
  
  names <- c(names(train)[feature_imp$Feature[i]], names)
}

feature_imp$names <- names

write_csv(feature_imp, "feature_imp_raw.csv")

